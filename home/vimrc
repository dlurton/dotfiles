" Default tab settings for all files
set tabstop=4 shiftwidth=4 softtabstop=4 expandtab

" Tab width of 2 for *.ml files
autocmd BufRead,BufNewFile *.ml set tabstop=2 shiftwidth=2 softtabstop=2

" Make Alt+arrow keys switch windows 
nmap <silent> <A-Up> :wincmd k<CR>
nmap <silent> <A-Down> :wincmd j<CR>
nmap <silent> <A-Left> :wincmd h<CR>
nmap <silent> <A-Right> :wincmd l<CR>

" Map Ctrl-J to insert a line under the cursor
nnoremap <C-j> i<CR><Esc>l

"stay in visual mode mode after indent
vnoremap > >gv
vnoremap < <gv

"enable  line numbers
set number

" set line number color (the default with the current theme is horrible)
highlight LineNr ctermfg=gray
highlight LineNr guifg=gray

" enable mouse
set mouse=a

" disable folding (I hate folding)
set nofoldenable

" set gvim's foreground and background colors
highlight Normal guifg=white guibg=black

" netrw is vim's built-in file browser
" https://shapeshed.com/vim-netrw/
" Execute :Vexplore to see
let g:netrw_banner = 0
let g:netrw_liststyle = 3
let g:netrw_browse_split = 4
let g:netrw_altv = 1
let g:netrw_winsize = 15
"augroup ProjectDrawer
"    autocmd!
    " autocmd VimEnter * :Vexplore
"    autocmd * :Vexplore
"augroup END


" sensible.vim - Defaults everyone can agree on
" Maintainer:   Tim Pope <http://tpo.pe/>
" Version:      1.1

if &compatible
  finish
else
  let g:loaded_sensible = 1
endif

if has('autocmd')
  filetype plugin indent on
endif
if has('syntax') && !exists('g:syntax_on')
  syntax enable
endif

" Use :help 'option' to see the documentation for the given option.

set autoindent
set backspace=indent,eol,start
set complete-=i
set smarttab

set nrformats-=octal

set ttimeout
set ttimeoutlen=100

set incsearch
" Use <C-L> to clear the highlighting of :set hlsearch.
if maparg('<C-L>', 'n') ==# ''
  nnoremap <silent> <C-L> :nohlsearch<CR><C-L>
endif

set laststatus=2
set ruler
set showcmd
set wildmenu

if !&scrolloff
  set scrolloff=1
endif
if !&sidescrolloff
  set sidescrolloff=5
endif
set display+=lastline

if &encoding ==# 'latin1' && has('gui_running')
  set encoding=utf-8
endif

if &listchars ==# 'eol:$'
  set listchars=tab:>\ ,trail:-,extends:>,precedes:<,nbsp:+
endif

if v:version > 703 || v:version == 703 && has("patch541")
  set formatoptions+=j " Delete comment character when joining commented lines
endif

if has('path_extra')
  setglobal tags-=./tags tags^=./tags;
endif

if &shell =~# 'fish$'
  set shell=/bin/bash
endif

set autoread
set fileformats+=mac

if &history < 1000
  set history=1000
endif
if &tabpagemax < 50
  set tabpagemax=50
endif
if !empty(&viminfo)
  set viminfo^=!
endif
set sessionoptions-=options

" Allow color schemes to do bright colors without forcing bold.
if &t_Co == 8 && $TERM !~# '^linux'
  set t_Co=16
endif

" Load matchit.vim, but only if the user hasn't installed a newer version.
if !exists('g:loaded_matchit') && findfile('plugin/matchit.vim', &rtp) ==# ''
  runtime! macros/matchit.vim
endif

inoremap <C-U> <C-G>u<C-U>
" ## added by OPAM user-setup for vim / base ## 93ee63e278bdfc07d1139a748ed3fff2 ## you can edit, but keep this line
let s:opam_share_dir = system("opam config var share")
let s:opam_share_dir = substitute(s:opam_share_dir, '[\r\n]*$', '', '')

let s:opam_configuration = {}

function! OpamConfOcpIndent()
  execute "set rtp^=" . s:opam_share_dir . "/ocp-indent/vim"
endfunction
let s:opam_configuration['ocp-indent'] = function('OpamConfOcpIndent')

function! OpamConfOcpIndex()
  execute "set rtp+=" . s:opam_share_dir . "/ocp-index/vim"
endfunction
let s:opam_configuration['ocp-index'] = function('OpamConfOcpIndex')

function! OpamConfMerlin()
  let l:dir = s:opam_share_dir . "/merlin/vim"
  execute "set rtp+=" . l:dir
endfunction
let s:opam_configuration['merlin'] = function('OpamConfMerlin')

let s:opam_packages = ["ocp-indent", "ocp-index", "merlin"]
let s:opam_check_cmdline = ["opam list --installed --short --safe --color=never"] + s:opam_packages
let s:opam_available_tools = split(system(join(s:opam_check_cmdline)))
for tool in s:opam_packages
  " Respect package order (merlin should be after ocp-index)
  if count(s:opam_available_tools, tool) > 0
    call s:opam_configuration[tool]()
  endif
endfor
" ## end of OPAM user-setup addition for vim / base ## keep this line

let g:syntastic_ocaml_checkers = ['merlin']
let g:syntastic_auto_loc_list = 1

" for airline plugin, below
let g:airline_powerline_fonts = 1

" to install plugins, add them between plug#begin and plug#end below and run
" `PlugInstall` the next time you open vim.
call plug#begin('~/.vim/plugged')

Plug 'vim-syntastic/syntastic'
Plug 'vim-airline/vim-airline'
Plug 'scrooloose/nerdtree'
Plug 'Yggdroot/indentLine'

" Source ~/vimrc.local.plugins if it exists
if filereadable(expand("~/.vimrc.local.plugins"))
    source ~/.vimrc.local.plugins
endif

" Initialize plugin system
call plug#end()

" Settings for NERDTree

" Key binding:
map <C-n> :NERDTreeToggle<CR>

" Cause VIM to exit when q is used if the only buffer open is NERDTree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" Open NERDTree by default
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if (!exists("s:std_in")) | NERDTree | wincmd l | endif

" Set line colors for Yggdroot/indentLine'
let g:indentLine_color_term = 239
let g:indentLine_color_gui = '#444444'

" none X terminal
let g:indentLine_color_tty_light = 4 " (default: 4)
let g:indentLine_color_dark = 2 " (default: 2)

" Background (Vim, GVim)
let g:indentLine_bgcolor_term = 0
let g:indentLine_bgcolor_gui = '#000000'

let g:indentLine_char_list = ['|', '¦', '┆', '┊']
let g:indentLine_enabled = 1


" Source ~/.vimrc.local if it exists
if filereadable(expand("~/.vimrc.local"))
    source ~/.vimrc.local
endif


